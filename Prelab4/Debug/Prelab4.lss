
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008dd  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d8  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003eb  00000000  00000000  0000137d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000214  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001dff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:

//***************************************************************************************************************************************************************
// Setup:
//***************************************************************************************************************************************************************
void setup(void) {
	cli();
  a6:	f8 94       	cli
	// Configura los pines de los botones como entrada con pull-up
	UCSR0B = 0;
  a8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRC &= ~(1 << PINC0); //Indico que en este pin existira una entrada para PC0
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC0);
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC1); //Indico que en este pin existira una entrada para PC1
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC1);
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;           //Seteo mi puerto D todos salidas.
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a b9       	out	0x0a, r24	; 10
	PORTD = contador;      //Le asigno que siempre en el puerto D me muestre el contador.
  c8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <contador>
  cc:	9b b9       	out	0x0b, r25	; 11
	DDRB = 0xFF;           //Habilito mi puerto B como salidas.
  ce:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;             //Apago mi puerto B.
  d0:	15 b8       	out	0x05, r1	; 5
	// Habilita las interrupciones externas
	PCICR |= (1 << PCIE1); // Habilita la interrupción PCINT8-14
  d2:	e8 e6       	ldi	r30, 0x68	; 104
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9); // Habilita interrupción PC0 y PC1
  dc:	ec e6       	ldi	r30, 0x6C	; 108
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	80 83       	st	Z, r24
	sei();
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <InitADC>:

uint8_t Milista[] = {0b01000000, 0b01111001, 0b00100100, 0b00110000, 0b00011001, 0b00010010, 0b00000010, 0b01111000, 0b00000000, 0b00010000, 0b10001000, 0b10000011, 0b11000110
	, 0b10100001 , 0b10000110, 0b10001110}; //Creo mi lista con la configuracion del display de 7 segmentos de anodo comun de 2 digitos.
	
void InitADC(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  f4:	80 81       	ld	r24, Z
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	80 83       	st	Z, r24
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR); 
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
	//Configuración del canal 7 ya que allí esta mi potenciómetro.
	ADMUX |= (1 << MUX2)|(1 << MUX1)|(1 << MUX0); 
 100:	80 81       	ld	r24, Z
 102:	87 60       	ori	r24, 0x07	; 7
 104:	80 83       	st	Z, r24
	ADCSRA = 0;
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 112:	80 81       	ld	r24, Z
 114:	87 60       	ori	r24, 0x07	; 7
 116:	80 83       	st	Z, r24
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <main>:
}
//***************************************************************************************************************************************************************
// Loop principal:
//***************************************************************************************************************************************************************
int main(void) {
	setup(); // Inicializa todo.
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	InitADC();//Configuro mi ADC.
 124:	0e 94 75 00 	call	0xea	; 0xea <InitADC>
	while (1) {
		ADCSRA |= (1<<ADSC);   //Habilito la interrupcion de ADC.
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	87 ea       	ldi	r24, 0xA7	; 167
 134:	91 e6       	ldi	r25, 0x61	; 97
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x16>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x1c>
 13c:	00 00       	nop
		_delay_ms(100);        //Pongo un retraso de 100 ms.
		transistor = 1;        //Mi transistor encendera el pin 0 del puerto B.
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		PORTB = transistor;
 144:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 148:	85 b9       	out	0x05, r24	; 5
		PORTD = contador;      // Mostrare el contador en el puerto B.
 14a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador>
 14e:	8b b9       	out	0x0b, r24	; 11
		if (contador == valoradc){ //Si el valor del ADC es igual al de contador, mantendre el orden que tenia el transistor y solo encendere el pin 3 para el led de alarma
 150:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <contador>
 154:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <valoradc>
 158:	98 13       	cpse	r25, r24
 15a:	e6 cf       	rjmp	.-52     	; 0x128 <main+0x8>
			PORTB = (transistor + 8);
 15c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 160:	88 5f       	subi	r24, 0xF8	; 248
 162:	85 b9       	out	0x05, r24	; 5
 164:	e1 cf       	rjmp	.-62     	; 0x128 <main+0x8>

00000166 <__vector_4>:
	return 0;
}
//***************************************************************************************************************************************************************
// Interrupciones:
//***************************************************************************************************************************************************************
ISR(PCINT1_vect) {
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
	if (!(PINC & (1 << PINC0))) {    
 174:	30 99       	sbic	0x06, 0	; 6
 176:	0f c0       	rjmp	.+30     	; 0x196 <__vector_4+0x30>
 178:	8b e7       	ldi	r24, 0x7B	; 123
 17a:	92 e9       	ldi	r25, 0x92	; 146
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <__vector_4+0x16>
 180:	00 c0       	rjmp	.+0      	; 0x182 <__vector_4+0x1c>
 182:	00 00       	nop
		_delay_ms(150);             //Espero 150 milisegundos si el boton se apachó, es decir, si se mandó un 0
		if (!(PINC & (1 << PINC0))) {
 184:	30 99       	sbic	0x06, 0	; 6
 186:	07 c0       	rjmp	.+14     	; 0x196 <__vector_4+0x30>
			contador++;             // Sumo 1 al contador, si este es mayor a 255, lo reinicio.
 188:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <contador>
			if (contador > 255)     
 192:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador>
				contador = 0;
		}
	}

	// Verifica si el botón de decremento está presionado
	if (!(PINC & (1 << PINC1))) { 
 196:	31 99       	sbic	0x06, 1	; 6
 198:	18 c0       	rjmp	.+48     	; 0x1ca <__vector_4+0x64>
 19a:	8b e7       	ldi	r24, 0x7B	; 123
 19c:	92 e9       	ldi	r25, 0x92	; 146
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <__vector_4+0x38>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <__vector_4+0x3e>
 1a4:	00 00       	nop
		_delay_ms(150);             // Espero 150 milisegundos si el segundo botón se apachó, si definivamente se apachó, quito 1 al contador.
		if (!(PINC & (1 << PINC1))) {
 1a6:	31 99       	sbic	0x06, 1	; 6
 1a8:	10 c0       	rjmp	.+32     	; 0x1ca <__vector_4+0x64>
			transistor = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
			PORTB = transistor; 
 1b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1b4:	85 b9       	out	0x05, r24	; 5
			contador--;             // Si el contador es menor a 0, hago underflow.
 1b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador>
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <contador>
			if (contador < 0) 
 1c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador>
				contador = 255; 
				PORTD = contador;
 1c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador>
 1c8:	8b b9       	out	0x0b, r24	; 11
		}
	}
}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_21>:

ISR(ADC_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
    valoradc = ADCH;              //Le mando el valor de ADC pero los 8 bits mas significativos a la izquierda a la variable valoradc.
 1ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ee:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <valoradc>
	bmenosig = valoradc & 0b00001111; //Hago un and para eliminar los 4 digitos superiores.
 1f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <valoradc>
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <bmenosig>
	bmasig   = (valoradc >> 4);       //Corro los 4 digitos superiores de valoradc para volverlos los 4 menos significativos de 8 bits.
 1fc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <valoradc>
 200:	82 95       	swap	r24
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <bmasig>
 208:	87 ea       	ldi	r24, 0xA7	; 167
 20a:	91 e6       	ldi	r25, 0x61	; 97
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <__vector_21+0x34>
 210:	00 c0       	rjmp	.+0      	; 0x212 <__vector_21+0x3a>
 212:	00 00       	nop
			_delay_ms(100);           //Retraso de 100 ms.
			transistor = 2;           // Habilito mi variable en 2 ya que encendere el pin1 del puerto B a donde va mi primer display.
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
			PORTB = transistor;
 21a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 21e:	85 b9       	out	0x05, r24	; 5
			PORTD = Milista[bmenosig]; //Muestro el valor que tengo de los bits menos significativos en la lista.
 220:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <bmenosig>
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	e0 50       	subi	r30, 0x00	; 0
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	80 81       	ld	r24, Z
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	87 ea       	ldi	r24, 0xA7	; 167
 230:	91 e6       	ldi	r25, 0x61	; 97
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <__vector_21+0x5a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <__vector_21+0x60>
 238:	00 00       	nop
			_delay_ms(100);            //Retraso de 100 ms.
			transistor = 4;            //Habilito mi variable en 4 ya que encendere solo el pin2 del puerto B a donde va mi segundo display.
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
			PORTB = transistor;
 240:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 244:	85 b9       	out	0x05, r24	; 5
			PORTD = Milista[bmasig];   //Muestro el valor que tengo de los bits mas significativos en la lista.
 246:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <bmasig>
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	e0 50       	subi	r30, 0x00	; 0
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	80 81       	ld	r24, Z
 252:	8b b9       	out	0x0b, r24	; 11
	ADCSRA |= (1<<ADIF);               //Apago o me salgo de la interrupcion.
 254:	ea e7       	ldi	r30, 0x7A	; 122
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	80 83       	st	Z, r24
	
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
